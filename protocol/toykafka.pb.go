// Code generated by protoc-gen-go. DO NOT EDIT.
// source: toykafka.proto

package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Topic struct {
	Topic                string   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Topic) Reset()         { *m = Topic{} }
func (m *Topic) String() string { return proto.CompactTextString(m) }
func (*Topic) ProtoMessage()    {}
func (*Topic) Descriptor() ([]byte, []int) {
	return fileDescriptor_toykafka_f442e5584530573d, []int{0}
}
func (m *Topic) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Topic.Unmarshal(m, b)
}
func (m *Topic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Topic.Marshal(b, m, deterministic)
}
func (dst *Topic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Topic.Merge(dst, src)
}
func (m *Topic) XXX_Size() int {
	return xxx_messageInfo_Topic.Size(m)
}
func (m *Topic) XXX_DiscardUnknown() {
	xxx_messageInfo_Topic.DiscardUnknown(m)
}

var xxx_messageInfo_Topic proto.InternalMessageInfo

func (m *Topic) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

type Payload struct {
	Payload              []byte   `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Payload) Reset()         { *m = Payload{} }
func (m *Payload) String() string { return proto.CompactTextString(m) }
func (*Payload) ProtoMessage()    {}
func (*Payload) Descriptor() ([]byte, []int) {
	return fileDescriptor_toykafka_f442e5584530573d, []int{1}
}
func (m *Payload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Payload.Unmarshal(m, b)
}
func (m *Payload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Payload.Marshal(b, m, deterministic)
}
func (dst *Payload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Payload.Merge(dst, src)
}
func (m *Payload) XXX_Size() int {
	return xxx_messageInfo_Payload.Size(m)
}
func (m *Payload) XXX_DiscardUnknown() {
	xxx_messageInfo_Payload.DiscardUnknown(m)
}

var xxx_messageInfo_Payload proto.InternalMessageInfo

func (m *Payload) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type ProduceRequest struct {
	Topic                *Topic   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Payload              *Payload `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProduceRequest) Reset()         { *m = ProduceRequest{} }
func (m *ProduceRequest) String() string { return proto.CompactTextString(m) }
func (*ProduceRequest) ProtoMessage()    {}
func (*ProduceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_toykafka_f442e5584530573d, []int{2}
}
func (m *ProduceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProduceRequest.Unmarshal(m, b)
}
func (m *ProduceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProduceRequest.Marshal(b, m, deterministic)
}
func (dst *ProduceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProduceRequest.Merge(dst, src)
}
func (m *ProduceRequest) XXX_Size() int {
	return xxx_messageInfo_ProduceRequest.Size(m)
}
func (m *ProduceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProduceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProduceRequest proto.InternalMessageInfo

func (m *ProduceRequest) GetTopic() *Topic {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *ProduceRequest) GetPayload() *Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

type MsgNumber struct {
	MsgNumber            uint32   `protobuf:"varint,1,opt,name=msg_number,json=msgNumber,proto3" json:"msg_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgNumber) Reset()         { *m = MsgNumber{} }
func (m *MsgNumber) String() string { return proto.CompactTextString(m) }
func (*MsgNumber) ProtoMessage()    {}
func (*MsgNumber) Descriptor() ([]byte, []int) {
	return fileDescriptor_toykafka_f442e5584530573d, []int{3}
}
func (m *MsgNumber) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgNumber.Unmarshal(m, b)
}
func (m *MsgNumber) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgNumber.Marshal(b, m, deterministic)
}
func (dst *MsgNumber) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNumber.Merge(dst, src)
}
func (m *MsgNumber) XXX_Size() int {
	return xxx_messageInfo_MsgNumber.Size(m)
}
func (m *MsgNumber) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNumber.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNumber proto.InternalMessageInfo

func (m *MsgNumber) GetMsgNumber() uint32 {
	if m != nil {
		return m.MsgNumber
	}
	return 0
}

type PollRequest struct {
	Topic                string     `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	ReadFrom             *MsgNumber `protobuf:"bytes,2,opt,name=read_from,json=readFrom,proto3" json:"read_from,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *PollRequest) Reset()         { *m = PollRequest{} }
func (m *PollRequest) String() string { return proto.CompactTextString(m) }
func (*PollRequest) ProtoMessage()    {}
func (*PollRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_toykafka_f442e5584530573d, []int{4}
}
func (m *PollRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PollRequest.Unmarshal(m, b)
}
func (m *PollRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PollRequest.Marshal(b, m, deterministic)
}
func (dst *PollRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollRequest.Merge(dst, src)
}
func (m *PollRequest) XXX_Size() int {
	return xxx_messageInfo_PollRequest.Size(m)
}
func (m *PollRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PollRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PollRequest proto.InternalMessageInfo

func (m *PollRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *PollRequest) GetReadFrom() *MsgNumber {
	if m != nil {
		return m.ReadFrom
	}
	return nil
}

type PollResponse struct {
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// payloads holds the returned messages.
	Payloads []*Payload `protobuf:"bytes,2,rep,name=payloads,proto3" json:"payloads,omitempty"`
	// new_read_from tells the requester where they should update their
	// read_from value to to move past the returned messages.
	NewReadFrom          *MsgNumber `protobuf:"bytes,3,opt,name=new_read_from,json=newReadFrom,proto3" json:"new_read_from,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *PollResponse) Reset()         { *m = PollResponse{} }
func (m *PollResponse) String() string { return proto.CompactTextString(m) }
func (*PollResponse) ProtoMessage()    {}
func (*PollResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_toykafka_f442e5584530573d, []int{5}
}
func (m *PollResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PollResponse.Unmarshal(m, b)
}
func (m *PollResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PollResponse.Marshal(b, m, deterministic)
}
func (dst *PollResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollResponse.Merge(dst, src)
}
func (m *PollResponse) XXX_Size() int {
	return xxx_messageInfo_PollResponse.Size(m)
}
func (m *PollResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PollResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PollResponse proto.InternalMessageInfo

func (m *PollResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *PollResponse) GetPayloads() []*Payload {
	if m != nil {
		return m.Payloads
	}
	return nil
}

func (m *PollResponse) GetNewReadFrom() *MsgNumber {
	if m != nil {
		return m.NewReadFrom
	}
	return nil
}

type ProduceResponse struct {
	Error                string     `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	AllocatedMsgNumber   *MsgNumber `protobuf:"bytes,2,opt,name=allocated_msg_number,json=allocatedMsgNumber,proto3" json:"allocated_msg_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ProduceResponse) Reset()         { *m = ProduceResponse{} }
func (m *ProduceResponse) String() string { return proto.CompactTextString(m) }
func (*ProduceResponse) ProtoMessage()    {}
func (*ProduceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_toykafka_f442e5584530573d, []int{6}
}
func (m *ProduceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProduceResponse.Unmarshal(m, b)
}
func (m *ProduceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProduceResponse.Marshal(b, m, deterministic)
}
func (dst *ProduceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProduceResponse.Merge(dst, src)
}
func (m *ProduceResponse) XXX_Size() int {
	return xxx_messageInfo_ProduceResponse.Size(m)
}
func (m *ProduceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProduceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProduceResponse proto.InternalMessageInfo

func (m *ProduceResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *ProduceResponse) GetAllocatedMsgNumber() *MsgNumber {
	if m != nil {
		return m.AllocatedMsgNumber
	}
	return nil
}

func init() {
	proto.RegisterType((*Topic)(nil), "protocol.Topic")
	proto.RegisterType((*Payload)(nil), "protocol.Payload")
	proto.RegisterType((*ProduceRequest)(nil), "protocol.ProduceRequest")
	proto.RegisterType((*MsgNumber)(nil), "protocol.MsgNumber")
	proto.RegisterType((*PollRequest)(nil), "protocol.PollRequest")
	proto.RegisterType((*PollResponse)(nil), "protocol.PollResponse")
	proto.RegisterType((*ProduceResponse)(nil), "protocol.ProduceResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ToyKafkaClient is the client API for ToyKafka service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ToyKafkaClient interface {
	// Produce returns the message number assigned to the stored message.
	Produce(ctx context.Context, in *ProduceRequest, opts ...grpc.CallOption) (*ProduceResponse, error)
	Poll(ctx context.Context, in *PollRequest, opts ...grpc.CallOption) (*PollResponse, error)
}

type toyKafkaClient struct {
	cc *grpc.ClientConn
}

func NewToyKafkaClient(cc *grpc.ClientConn) ToyKafkaClient {
	return &toyKafkaClient{cc}
}

func (c *toyKafkaClient) Produce(ctx context.Context, in *ProduceRequest, opts ...grpc.CallOption) (*ProduceResponse, error) {
	out := new(ProduceResponse)
	err := c.cc.Invoke(ctx, "/protocol.ToyKafka/Produce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toyKafkaClient) Poll(ctx context.Context, in *PollRequest, opts ...grpc.CallOption) (*PollResponse, error) {
	out := new(PollResponse)
	err := c.cc.Invoke(ctx, "/protocol.ToyKafka/Poll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ToyKafkaServer is the server API for ToyKafka service.
type ToyKafkaServer interface {
	// Produce returns the message number assigned to the stored message.
	Produce(context.Context, *ProduceRequest) (*ProduceResponse, error)
	Poll(context.Context, *PollRequest) (*PollResponse, error)
}

func RegisterToyKafkaServer(s *grpc.Server, srv ToyKafkaServer) {
	s.RegisterService(&_ToyKafka_serviceDesc, srv)
}

func _ToyKafka_Produce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProduceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToyKafkaServer).Produce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ToyKafka/Produce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToyKafkaServer).Produce(ctx, req.(*ProduceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToyKafka_Poll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToyKafkaServer).Poll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ToyKafka/Poll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToyKafkaServer).Poll(ctx, req.(*PollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ToyKafka_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.ToyKafka",
	HandlerType: (*ToyKafkaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Produce",
			Handler:    _ToyKafka_Produce_Handler,
		},
		{
			MethodName: "Poll",
			Handler:    _ToyKafka_Poll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "toykafka.proto",
}

func init() { proto.RegisterFile("toykafka.proto", fileDescriptor_toykafka_f442e5584530573d) }

var fileDescriptor_toykafka_f442e5584530573d = []byte{
	// 350 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x4f, 0x4b, 0xf3, 0x40,
	0x10, 0xc6, 0xdf, 0xb4, 0x6f, 0x6d, 0x32, 0xfd, 0x87, 0x63, 0x95, 0x58, 0x28, 0x94, 0x88, 0x20,
	0x8a, 0x45, 0xea, 0xa1, 0x57, 0x2f, 0x7a, 0x11, 0xa5, 0x84, 0x7a, 0x0e, 0xdb, 0x64, 0x5b, 0xa4,
	0x49, 0x26, 0x6e, 0x52, 0x4a, 0x3f, 0x80, 0x37, 0x3f, 0xb4, 0x64, 0x93, 0x4d, 0xa2, 0xd4, 0x9e,
	0xb2, 0xb3, 0xfb, 0xec, 0xf3, 0x7b, 0x66, 0xb2, 0xd0, 0x4d, 0x68, 0xb7, 0x66, 0xcb, 0x35, 0x1b,
	0x47, 0x82, 0x12, 0x42, 0x5d, 0x7e, 0x5c, 0xf2, 0xad, 0x21, 0x34, 0xe6, 0x14, 0xbd, 0xbb, 0xd8,
	0x87, 0x46, 0x92, 0x2e, 0x4c, 0x6d, 0xa4, 0x5d, 0x19, 0x76, 0x56, 0x58, 0x17, 0xd0, 0x9c, 0xb1,
	0x9d, 0x4f, 0xcc, 0x43, 0x13, 0x9a, 0x51, 0xb6, 0x94, 0x92, 0xb6, 0xad, 0x4a, 0xcb, 0x83, 0xee,
	0x4c, 0x90, 0xb7, 0x71, 0xb9, 0xcd, 0x3f, 0x36, 0x3c, 0x4e, 0xf0, 0xb2, 0x6a, 0xd6, 0x9a, 0xf4,
	0xc6, 0x8a, 0x37, 0x96, 0xb0, 0xdc, 0x1d, 0x6f, 0x4a, 0xcb, 0x9a, 0x14, 0x1e, 0x97, 0xc2, 0x1c,
	0x5b, 0x52, 0xae, 0xc1, 0x78, 0x89, 0x57, 0xaf, 0x9b, 0x60, 0xc1, 0x05, 0x0e, 0x01, 0x82, 0x78,
	0xe5, 0x84, 0xb2, 0x92, 0x94, 0x8e, 0x6d, 0x04, 0xea, 0xd8, 0x7a, 0x83, 0xd6, 0x8c, 0x7c, 0x5f,
	0xc5, 0xd9, 0xdb, 0x1b, 0xde, 0x81, 0x21, 0x38, 0xf3, 0x9c, 0xa5, 0xa0, 0x20, 0xe7, 0x9f, 0x94,
	0xfc, 0x82, 0x65, 0xeb, 0xa9, 0xea, 0x49, 0x50, 0x60, 0x7d, 0x69, 0xd0, 0xce, 0x7c, 0xe3, 0x88,
	0xc2, 0x98, 0xa7, 0xc6, 0x5c, 0x08, 0x12, 0xca, 0x58, 0x16, 0x78, 0x0b, 0x7a, 0x1e, 0x3a, 0x36,
	0x6b, 0xa3, 0xfa, 0xfe, 0xbe, 0x0a, 0x09, 0x4e, 0xa1, 0x13, 0xf2, 0xad, 0x53, 0x66, 0xa9, 0xff,
	0x9d, 0xa5, 0x15, 0xf2, 0xad, 0xad, 0xe2, 0x84, 0xd0, 0x2b, 0xe6, 0x7e, 0x30, 0xd0, 0x23, 0xf4,
	0x99, 0xef, 0x93, 0xcb, 0x12, 0xee, 0x39, 0x95, 0xb9, 0x1d, 0x68, 0x1a, 0x8b, 0x0b, 0xc5, 0xde,
	0xe4, 0x53, 0x03, 0x7d, 0x4e, 0xbb, 0xe7, 0xf4, 0x21, 0xe1, 0x03, 0x34, 0x73, 0x38, 0x9a, 0x95,
	0xee, 0x7e, 0xbc, 0x83, 0xc1, 0xf9, 0x9e, 0x93, 0x2c, 0xa9, 0xf5, 0x0f, 0xa7, 0xf0, 0x3f, 0x1d,
	0x26, 0x9e, 0x56, 0x44, 0xe5, 0x4f, 0x1b, 0x9c, 0xfd, 0xde, 0x56, 0x17, 0x17, 0x47, 0xf2, 0xe0,
	0xfe, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x8c, 0x34, 0x2d, 0x82, 0xd6, 0x02, 0x00, 0x00,
}
